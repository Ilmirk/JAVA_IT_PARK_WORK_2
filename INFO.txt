27(10) -> 11011(2)

27 : 2 = 13 + 1 ост, 27 = 13 * 2 + 1
13 : 2 = 6 + 1 ост, 13 = 6 * 2 + 1
6 : 2 = 3 + 0 ост, 6 = 3 * 2 + 0
3 : 2 = 1 + 1 ост, 3 = 1 * 2 + 1
1
--------------------------
43210 - разряды
11011 - число
1 * 2^4 + 1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0 = 27

--------------------------
Какой диапазон чисел можно
 выразить n-количеством битов?
 
 Пусть n = 2, диапазон = 0 .. 2^2 - 1
 
 00 -> 0
 01 -> 1
 10 -> 2
 11 -> 3

 Пусть n = 3, диапазон = 0 .. 2^3 - 1
 000 -> 0
 001 -> 1
 010 -> 2
 011 -> 3
 100 -> 4
 101 -> 5
 110 -> 6
 111 -> 7
 
 int занимает в памяти 4 байта. В одном байте - 8 бит.
 Следовательно, максимальное значение, которое
 можно положить в переменную типа int - 2^32 - 1
 
 НО! На самом деле с int все по-другому.
 Используются только 31 бит из 32-х.
 Потому что 1-й бит уходит под знак числа.
 Если первый бит - 0, число положительное
 Если первый бит - 1, число отрицательное.
 
 1 байт int-а - 8 бит
 00000001 - 1
 10000001 - -1

 Например -27 в int будет выглядеть так:
 int a = -27;
 10000000 00000000 00000000 00011011
 
 В инте на самом деле: -2^31 .. 2^31 - 1
 
 int - 4 байта, -2^31 .. 2^31 - 1 диапазон
 
 int - тип данных
 Тип данных:
 - набор возможных значений 
 - набор возможных операций над значениями
 
 int:
 - целые числа в диапазоне -2^31 .. 2^31 - 1
 - +, -, *, /, %
 
 Объявление переменной на java:
 ТИП имя = нач_знач;
 int a = 27;
 int b; // по умолчанию ноль
 
 / - операция деления. Если слева целое, и справа целое, 
 то выполняется целочисленное деление - остаток полностью отбрасывается
 % - взятие остатка от деления
 То есть:
 Любое число можно выразить формулой:
 n = k * m + t;
 
 n / m = k;
 n % m = t;
 
 У себя в папке с фамилией создаете папку 
 ClassWorks
 Там создаете папку Task1
 В ней сохраняем решение задачи:
 int a = 13768; // сумма, которую хочет выдать банкомат
 // определить количество купюр каждого номинала
 // которое следует выдать банкомату
 5000 - 2
 1000 - 3
 500 - 1
 100 - 2
 50 - 1
 10 - 1
 5 - 1
 2 - 1
 1
РЕШЕНИЕ:
----------------------------
int a = 13768; // 5000 * 2 + 3768
		
		int a5000 = a / 5000; // a5000 = 2
		System.out.println("5000 - " + a5000);
		a = a % 5000; // a = 3 768
		
		int a1000 = a / 1000; // a1000 = 3
		System.out.println("1000 - " + a1000);
		a = a % 1000; // a = 768
		
		// и т.д.
-----------------------------
Именование переменных:
camelCase
camel_case - не так
System.out.println("Hello" + 10);
Выведет - Hello 10
+ - сцепляет строки
Scanner - модуль, позволяющий читать информацию с клавиатуры
Чтобы он работал в программе необходимо его импортировать:
import java.util.Scanner;
Чтобы его использовать необходимо создать его экземпляр:
Scanner scanner = new Scanner(System.in);
Функция nextInt ожидает ввода числа с клавиатуры:
int a = scanner.nextInt();
после того, как пользователь введет число, и нажмет enter оно
попадет в переменную <a>

Домашняя работа:
Создаем на GoogleDrive папку HomeWorks.
В них делаем папки
Task1
Task2
...
В каждую папку заливаем только Program.java - файл

ДЗ:
1) Доделать банкомат, сделать считывание и вывод
всех купюр
2) Считать три числа - a,b,c. Вывести их сумму.
3) Считать два числа - a,b - вывести их частное
4) Считать два числа - a,b - вывести остаток от деления a на b
5) Считать число - 3 знака (0..255), вывести его двоичное представление.
циклы и условия запрещены.

------------------------------------------
Условный оператор if ... else

if (условие_1) {
	действия_при_выполнении_условия_1
} else {
	действия_при_НЕвыполнении_условия_1
}

if (условие_1) {
	действия_при_выполнении_условия_1
} else if (условие_2) {
	действия_при_НЕвыполнении_условия_1
	И_при_выполнении_условия_2
} else {
	действия_при_невыполнении_верхних_условий
}

if (условие_1) {
	действия_при_выполнении_условия_1
}
if (условие_2) {
	действия_при_выполнении_условия_2
}

ОЧЕНЬ ВАЖНО:

Скобки - фигурные { ОБЛАСТЬ_ВИДИМОСТИ }
В области видимости нельзя повторно объявить переменную

МОЖНО:

if (e) {
	int b = 10;
} else {
	int b = 5;
}

НЕЛЬЗЯ:
if (e) {
	int b = 10;
	if (u) {
		int b = 10;
	}
}

a && b - одновременно условие a и условие b истинны
a || b - истинно либо a, либо b, либо одновременно истинны

a += 10; // a = a + 10;
a /= 10 // a = a / 10;

ЦИКЛ - структура управления, делаем действие пока условие цикла
истинно
Один шаг цикла - итерация.

ДЗ:

6) Считать в цикле 10 чисел, посчитать сумму четных
7) Считать в цикле 10 чисел, посчитать произведение нечетных
8) Считать в цикле 10 чисел,  посчитать сумму чисел, оканчивающихся на 7

ТРЕБОВАНИЕ!!!!!
Отступы, форматирование, именование

ДЗ для любимчиков:
ClassWorks - Task3, Task4, Task5
3 - Вывести EVEN если считанное число - четное, NOT EVEN если нечетное
4 - Угадайка
5 - Вывести четные числа от 0 до n, n - с клавиатуры

Условие в циклах и в условных операторах называются "выражениями" - expression
expression имеет тип.

Условие - это такое выражение, которое имеет тип boolean

тип boolean - true/false, занимает в памяти один байт.

Задача: проверить, является ли число простым.

Если число простое - выводим на экран PRIME, если составное - NOT PRIME.
Число подается с клавиатуры.

Простое число - делится на себя и на 1.

Алгоритм проверки простоты числа:
X - входное число
1) Алгоритм в лоб: делить число X на все числа [2..X-1]
2) Алгоритм чуть быстрее: делить число X на все числа [2..x/2]
19
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
3) Алгоритм еще быстрее: делить число X на все числа [2..корень(x)]
	 i * i <= x
Пока (i <= корень(х)) {
	если (x делится нацело на i) {
		сразу говорим, что число не простое
	}
}

если цикл выполнился, и мы не нашли делителей, то говорим, что простое

ВАЖНО:
ПРЕЖДЕ ЧЕМ ИСПОЛЬЗОВАТЬ ПЕРЕМЕННУЮ ЕЕ НАДО ОБЪЯВИТЬ И ПРОИНИЦИАЛИЗИРОВАТЬ

ДЗ:
Везде на вход сначала подается число N, а затем
N-штук чисел

9) Найти минимальное число среди N чисел
10) Найти максимальное число среди N чисел
11) Найти среднее арифмитическое чисел
12) Найти количество локальных максимумов
	a_пред < а_тек > a_след
	а_тек - локальный максимум

6
12
16 - локальный максимум
8
11 - локальный максимум
9
7
ОТВЕТ: 2

БИНАРНЫЕ ЛОГИЧЕСКИЕ ОПЕРАТОРЫ:
a == b - true, если a равно b
a != b - true, если a не равно b
a <= b
a >= b
УНАРНЫЙ ЛОГИЧЕСКИЙ ОПЕРАТОР:
!a - не a, true - если a - false, false - a - true

double - вещественный тип, 8 байтов
СМ. мантисса
https://ru.wikipedia.org/wiki/%D0%A7%D0%B8%D1%81%D0%BB%D0%BE_%D0%B4%D0%B2%D0%BE%D0%B9%D0%BD%D0%BE%D0%B9_%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D0%B8

https://ru.wikibooks.org/wiki/Java/%D0%A2%D0%B8%D0%BF%D1%8B_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85

/ - если слева целое и справа целое, то результат тоже целое
/ - если какое либо из чисел вещественное, то результат считается вещественным (с точкой, дробь)
Неявное преобразование - int -> double
Явное преобразование - double -> int, явное преобразование необходимо проводить, когда возможна потеря данных. 

130 в int
00000000 00000000 00000000 10000010
byte:
10000010 - дополнительный код для -127

Что такое дополнительный код?????
-127

В двоичном коде положительное 127
01111110
Код инвертируется - получаем обратный код
10000001
Получаем дополнительный код: прибавляем 1:
10000010

ЗАЧЕМ ЭТО НАДО? 

27 - 5, что делает компьютер:
Заменяет вычитание сложением:

27 + (-5)
Как получить -5?

Пять как положительное:
101
Например, используем 8 разрядов:
00000101
Получаем обратный код:
11111010
Получаем дополнительный код:
11111011
Складываем 27 в двоичном коде и дополнительный код для -5:
 00011011
 11111011
100010110
 00010110

 ЧТО МЫ ЗНАЕМ:

1) Типы данных - int, boolean, double операции над ними и размер
2) Утилиты java и javac
3) if, while
4) System.in, System.out
5) Бинарные унарные логические операторы
6) Явное и неявное преобразования
7) переполнение
8) обратный, дополнительный коды